from PyQt4.QtGui import *
from PyQt4.QtCore import *
from delegates import *
from settings import *

class VariableWidget(QTableWidget):
    deleteKeyPressed = pyqtSignal()      
     
    def __init__(self, parent):
        QTableWidget.__init__(self, parent)
        self.delegates = [UniqueLineEditDelegate(None,  0), DropDownDelegate(variableTypes,  QVariant(variableTypes[0])),  
                                  CheckBoxDelegate(), CheckBoxDelegate(),  ButtonDelegate('...', self.displayChoices)]
        
        self.setItemDelegateForColumn(0, self.delegates[0])                
        self.setItemDelegateForColumn(1, self.delegates[1])                
        self.setItemDelegateForColumn(2, self.delegates[2])
        self.setItemDelegateForColumn(4, self.delegates[3])
        self.setItemDelegateForColumn(6, self.delegates[4])
        self.itemChanged.connect(self.onItemChanged)
        
    def addVariable(self):
        self.setSortingEnabled(False)
        row = self.rowCount()
        self.insertRow(row)
        self.setItem(row,  0,  QTableWidgetItem('unknown'))
        self.setItem(row,  1,  QTableWidgetItem('String'))        
        self.setItem(row,  2,  QTableWidgetItem(False))
        self.setItem(row,  3,  QTableWidgetItem(''))
        self.setItem(row,  4,  QTableWidgetItem(False))
        self.setItem(row,  5,  QTableWidgetItem(''))
        self.setItem(row,  6,  QTableWidgetItem(''))

        self.item(row, 2).setData(EditorEnabledRole,  True)
        self.item(row, 4).setData(EditorEnabledRole,  True)
        self.setSortingEnabled(True)
        self.updateDelegates()
    
    def onItemChanged(self, it):
        if it.column() == 1 and self.item(it.row(), 6):
            self.item(it.row(), 6).setData(EditorEnabledRole, it.data(Qt.DisplayRole) == 'DropDown');
            
    def removeVariable(self):
        if not self.selectedRanges(): return
        self.setSortingEnabled(False)
        rowNumbers = []
        for r in self.selectedRanges():
            rowNumbers.extend(range(r.topRow(), r.bottomRow()+1)) 
        rowNumbers.sort()
        rowNumbers.reverse()
        for n in rowNumbers:        
            if not self.item(n, 0).data(Qt.DisplayRole).toString() in permanentVariableNames:
                self.removeRow(n)
        self.setSortingEnabled(True)

    def displayChoices(self, choices):
        dlg = ChoicesDialog(choices.toList(), self.parent())      
        if dlg.exec_() == QDialog.Accepted:
            choices = []
            for i in range(dlg.choices.count()):
                choices.append(dlg.choices.item(i).text())
            return QVariant(choices)
        else:
            return choices
            

    def updateDelegates(self):
        # Set Choices for dropdowns
        for i in range(self.rowCount()):
            self.item(i, 6).setData(EditorEnabledRole, self.item(i, 1).data(Qt.DisplayRole)=='DropDown');
            self.item(i, 2).setData(EditorEnabledRole,  True)
            self.item(i, 4).setData(EditorEnabledRole,  True)
            isReadOnly = self.item(i, 0).data(Qt.DisplayRole) in permanentVariableNames
            if isReadOnly:
                self.item(i, 0).setFlags(self.item(i, 0).flags() &~ Qt.ItemIsEditable)
                self.item(i, 1).setFlags(self.item(i, 0).flags() &~ Qt.ItemIsEditable)
                self.item(i, 2).setData(EditorReadOnlyRole,  isReadOnly)          
#                self.item(i, 3).setFlags(self.item(i, 3).flags() &~ Qt.ItemIsEditable)
                self.item(i, 4).setData(EditorReadOnlyRole,  isReadOnly)            
                self.item(i, 5).setFlags(self.item(i, 5).flags() &~ Qt.ItemIsEditable)
