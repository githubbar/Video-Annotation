# -*- coding: utf-8 -*-
""" Delegates """
from PyQt4.QtGui import *
from PyQt4.QtCore import *
import sys

from settings import *

class CheckBoxDelegate(QStyledItemDelegate):
    def __init__(self, parent = None):
        QStyledItemDelegate.__init__(self, parent)

    def createEditor(self, parent, option, index):
        editor = QCheckBox( parent )
        editor.installEventFilter(self)       
        return editor

    def setEditorData( self, checkBox, index ):
        value = index.model().data(index, Qt.DisplayRole).toBool()
        if value:
            checkBox.setCheckState(Qt.Checked)
        else:
            checkBox.setCheckState(Qt.Unchecked)

    def setModelData(self, checkBox, model, index):
        if checkBox.checkState() == Qt.Checked:
            model.setData( index, QVariant(True) )
        else:
            model.setData( index, QVariant(False) )

    def updateEditorGeometry( self, editor, option, index ):
        editor.setGeometry(option.rect)
        
class FontOpenDelegate(QStyledItemDelegate):
    def __init__(self, parent = None):
        QStyledItemDelegate.__init__(self, parent)

    def createEditor(self, parent, option, index):
         (f,  ok) = QFontDialog.getFont(index.data(Qt.EditRole).toPyObject(),  None)
         if ok:
             index.model().setData(index,  QVariant(f))
         return None

    def updateEditorGeometry(self, editor, option, index):
        editor.setGeometry(option.rect)

    def paint(self, painter, option, index):
        if (index.column() == 0):
            QStyledItemDelegate.paint(self, painter, option, index)
        else:
            painter.save()
            if (option.state & QStyle.State_MouseOver):
                painter.fillRect(option.rect, Qt.green);
            painter.setPen(QPen(Qt.black))
            v= index.data(Qt.EditRole)
            if v.isValid():
                text = v.toPyObject().family() + ' : ' + str(v.toPyObject().pointSize())
                painter.drawText(option.rect, Qt.AlignLeft, text)
            painter.restore()

class TimeDelegate(QStyledItemDelegate):
    def __init__(self, parent = None):
        QStyledItemDelegate.__init__(self, parent)
    
    def displayText(self, value, locale):        
        if value.type() == QVariant.Time:
            return value.toTime().toString('hh:mm:ss')
        else:
            return QStyledItemDelegate.displayText(self, value, locale)

    def createEditor(self, parent, option, index):
        editor = QTimeEdit(index.model().data(index, Qt.EditRole).toTime(), parent)
        editor.setDisplayFormat("hh:mm:ss")
        return editor
        
class FileOpenDelegate(QStyledItemDelegate):
    def __init__(self, filter = 'All Files (*.*)',  parent = None):
        QStyledItemDelegate.__init__(self, parent)
        self.filter = filter

    def createEditor(self, parent, option, index):
            editor = FileOpen(self.filter,  parent)
            editor.installEventFilter(self)            
            return editor
            
    def setEditorData(self, editor, index):
        QStyledItemDelegate.setEditorData(self, editor, index)

    def setModelData(self, editor, model, index):
        QStyledItemDelegate.setModelData(self, editor, model, index)

    def updateEditorGeometry(self, editor, option, index):
        editor.setGeometry(option.rect)

    def paint(self, painter, option, index):
        if (option.state & QStyle.State_MouseOver):
            painter.fillRect(option.rect, Qt.green);
        QStyledItemDelegate.paint(self, painter, option, index)

class FileOpen(QLineEdit):
    def __init__(self, filter = 'All Files (*.*)', parent = None):
        QLineEdit.__init__(self, parent)
        self.filter = filter
        self.button = QToolButton(self)
        self.button.setIcon(QIcon('icons/folder-open.png'))            
        self.button.setIconSize(QSize(16, 16))
        self.button.setStyleSheet("QToolButton { border: none; padding: 0px; }")
        frameWidth = self.style().pixelMetric(QStyle.PM_DefaultFrameWidth)
        sz = self.button.sizeHint()        
        self.setStyleSheet(QString("QLineEdit { padding-right: %1px; }").arg(sz.width() + frameWidth + 1))
        msz = self.minimumSizeHint()
        self.setMinimumSize(max(msz.width(), sz.height() + frameWidth * 2 + 2), max(msz.height(), sz.height() + frameWidth * 2 + 2))
        self.connect(self.button, SIGNAL("clicked()"), self.openFileName)

    def resizeEvent(self, event):
        sz = self.button.sizeHint()
        frameWidth = self.style().pixelMetric(QStyle.PM_DefaultFrameWidth)
        self.button.move(self.rect().right() - frameWidth - sz.width(), (self.rect().bottom() + 1 - sz.height())/2)
        
    def openFileName(self):
        fName = QFileDialog.getOpenFileName(self.parent(), 'Open File', '.',  self.filter)
        if fName: self.setText(unicode(fName))


class DropDownDelegate(QStyledItemDelegate):
    def __init__(self, choices=[],  currentText=QVariant(),  parent = None):
        QStyledItemDelegate.__init__(self, parent)
        self.choices = choices
        self.currentText = currentText

    def createEditor(self, parent, option, index):
        qApp.installEventFilter(self)              
        editor = DropDownEditor(parent)
#        editor.setEditable(True)
        editor.setAutoCompletion(True)
        editor.setDuplicatesEnabled(False)
        editor.addItems(self.choices)
        editor.setCurrentIndex(editor.findText(self.currentText.toString()))
#        print 'createEditor: '+self.currentText.toString()+' index: '+str(editor.currentIndex())
        editor.installEventFilter(self)       
        return editor
    
    def setEditorData( self, editor, index ):
        value = index.model().data(index, Qt.EditRole)
        editor.setCurrentIndex(editor.findText(value.toString()))

    def setModelData(self, editor, model, index):
        model.setData( index, editor.currentText() )

    def updateEditorGeometry( self, editor, option, index ):
        editor.setGeometry(option.rect)

class DropDownEditor(QComboBox):
    def __init__(self, parent = None):
        QComboBox.__init__(self, parent)

    def focusInEvent (self, event):
        QComboBox.focusInEvent (self, event)
        qApp.installEventFilter(self)        
    
    def focusOutEvent (self, event):
        QComboBox.focusOutEvent (self, event)
        qApp.removeEventFilter(self)        

    def eventFilter(self, object, event):
        if (event.type() == QEvent.Shortcut or event.type() == QEvent.ShortcutOverride) \
        and event.key:
            event.accept()
            return True
        else: 
            return QComboBox.eventFilter(self,  object, event)
       
class ColorPickDelegate(QStyledItemDelegate):
    def __init__(self, parent = None,  color = "#ffffff"):
        QStyledItemDelegate.__init__(self, parent)
        self.color = color

    def createEditor(self, parent, option, index):
        editor = ColorPick(self.color, parent)
        editor.installEventFilter(self)            
        return editor
            
    def setEditorData(self, editor, index):
        QStyledItemDelegate.setEditorData(self, editor, index)

    def setModelData(self, editor, model, index):
        QStyledItemDelegate.setModelData(self, editor, model, index)
        if self.parent():
            self.parent().save()
        else:
            session.commit()

    def updateEditorGeometry(self, editor, option, index):
        editor.setGeometry(option.rect)

    def paint(self, painter, option, index):
        if (option.state & QStyle.State_MouseOver):
            painter.fillRect(option.rect, Qt.green);
        QStyledItemDelegate.paint(self, painter, option, index)

class ColorPick(QLineEdit):
    def __init__(self, color, parent = None):
        QLineEdit.__init__(self, parent)
        self.color = color
        self.button = QToolButton(self)
        self.button.setIcon(QIcon('resources/icons/color-picker.ico'))            
        self.button.setIconSize(QSize(16, 16))
        self.button.setStyleSheet("QToolButton { border: none; padding: 0px; }")
        frameWidth = self.style().pixelMetric(QStyle.PM_DefaultFrameWidth)
        sz = self.button.sizeHint()        
        self.setStyleSheet(QString("QLineEdit { padding-right: %1px; }").arg(sz.width() + frameWidth + 1))
        msz = self.minimumSizeHint()
        self.setMinimumSize(max(msz.width(), sz.height() + frameWidth * 2 + 2), max(msz.height(), sz.height() + frameWidth * 2 + 2))
        self.connect(self.button, SIGNAL("clicked()"), self.openColor)

    def resizeEvent(self, event):
        sz = self.button.sizeHint()
        frameWidth = self.style().pixelMetric(QStyle.PM_DefaultFrameWidth)
        self.button.move(self.rect().right() - frameWidth - sz.width(), (self.rect().bottom() + 1 - sz.height())/2)
        
    def openColor(self):
        color = QColorDialog.getColor(QColor(self.color), self)            
        if color: 
            self.setText(color.name())


#class FontOpen(QLineEdit):
#    def readFont(self):
#        return self._font
#
#    def writeFont(self, val):
#        self._font = val
#
#    font = pyqtProperty(QVariant,  readFont,  writeFont,  None,  None,  None,  True,  True,  True,  True)  
#    
#    def __init__(self, parent = None,  f = QVariant()):
#        QLineEdit.__init__(self, parent)
#        self._font = f
#        self.setAutoFillBackground(True)
#        self.button = QToolButton(self)
#        self.button.setIcon(QIcon('icons/font.png'))            
#        self.setText(f.toPyObject().family() + ' : ' + str(f.toPyObject().pointSize()))            
#        self.button.setIconSize(QSize(16, 16))
#        self.button.setStyleSheet("QToolButton { border: none; padding: 0px;}")
#        frameWidth = self.style().pixelMetric(QStyle.PM_DefaultFrameWidth)
#        sz = self.button.sizeHint()        
#        self.setStyleSheet(QString("QLineEdit { padding-right: %1px; }").arg(sz.width() + frameWidth + 1))
#        msz = self.minimumSizeHint()
#        self.setMinimumSize(max(msz.width(), sz.height() + frameWidth * 2 + 2), max(msz.height(), sz.height() + frameWidth * 2 + 2))
#
#        self.setProperty('font', f)        
#
#    def mousePressEvent(self, event):
#        self.openFont()
# 
#    def resizeEvent(self, event):
#        sz = self.button.sizeHint()
#        frameWidth = self.style().pixelMetric(QStyle.PM_DefaultFrameWidth)
#        self.button.move(self.rect().right() - frameWidth - sz.width(), (self.rect().bottom() + 1 - sz.height())/2)
#        
#    def openFont(self):
#        (f,  ok) = QFontDialog.getFont(self._font.toPyObject(),  self)
#        if ok:
#            self._font = QVariant(f)
#            self.editingFinished.emit()
