""" 
Build script for cxFreeze library

add ""from PyQt4 import QtNetwork"" to Ui_window.py

Run this file with "build" command line argument to build an exe. Run as administrator to access dll's in system dir.
egg includes (e.g. elixir library) must by unzipped for cx_freeze to find them
"""

from cx_Freeze import setup, Executable
import sys
import os
import glob

Target_1 = Executable(
    # what to build
    script = "main.py",
    initScript = None,
    base = 'Win32GUI',
    targetName = "VideoAnnotationTool.exe",
    compress = True,
    copyDependentFiles = True,
    appendScriptToExe = False,
    appendScriptToLibrary = False, 
    icon = "icons\icon.ico"
    )
    
    
include_files = ["icons"]

# Coppy necessary dll's from the VLC directory
import PyQt4.Qt as qt
import subprocess

# generate help and add help files
subprocess.call(['qcollectiongenerator', 'help/help.qhcp', '-o', 'help/help.qhc'], shell=True)

include_files.append(('help', 'help'))
#for f in glob.glob('help/*'):
#    include_files.append((f, os.path.basename(f)))

app = qt.QApplication([])
vlcDir = str("c:/Program Files (x86)/VideoLAN/VLC")
for f in glob.glob(os.path.join(vlcDir,'*.dll')):
    include_files.append((f, os.path.basename(f)))
    
include_files.append((os.path.join(vlcDir, 'plugins'), 'plugins'))

# Copy qt.conf from the PyQt bin directory (without it the icons don't show)
include_files.append((os.path.join(str(qt.QLibraryInfo.location(qt.QLibraryInfo.BinariesPath)),  'qt.conf'),  'qt.conf'))


ffmpegDir = str("c:/Program Files (x86)/ffmpeg")
include_files.append((os.path.join(ffmpegDir, 'bin'), '.'))
include_files.append("categories.txt")

setup(
        name = "VideoAnnotationTool",
        version = "0.1",
        description = "Video Annotation Tool",
        author = "author",
        options = {"build_exe": {
            "compressed": "True",
            "excludes":  ["tcl","tk","Tkinter"],                                      
            "include_files": include_files,
            "packages": []
            } 
       },
        executables = [Target_1]
    )

