from PyQt4.QtGui import *
from PyQt4.QtCore import *
from delegates import *
from settings import *

class VariableWidget(QTableWidget):
    deleteKeyPressed = pyqtSignal()      
     
    def __init__(self, parent):
        QTableWidget.__init__(self, parent)
        self.setItemDelegate(CustomDelegate())
        self.itemChanged.connect(self.onItemChanged)
        
    def addVariable(self):
        self.setSortingEnabled(False)
        row = self.rowCount()
        self.insertRow(row)
        self.setItem(row,  0,  QTableWidgetItem('unknown'))
        self.setItem(row,  1,  QTableWidgetItem('String'))        
        self.setItem(row,  2,  QTableWidgetItem('String'))        
        self.setItem(row,  3,  QTableWidgetItem(False))
        self.setItem(row,  4,  QTableWidgetItem(''))
        self.setItem(row,  5,  QTableWidgetItem(False))
        self.setItem(row,  6,  QTableWidgetItem(''))
        self.setItem(row,  7,  QTableWidgetItem(''))
        self.setSortingEnabled(True)
        self.updateDelegates()
    
    def onItemChanged(self, it):
        if it.column() == 1 and self.item(it.row(), 7) and it.data(Qt.DisplayRole) == 'DropDown':
            self.item(it.row(), 7).setData(EditorTypeRole, 'Button')
            
    def removeVariable(self):
        if not self.selectedRanges(): return
        self.setSortingEnabled(False)
        rowNumbers = []
        for r in self.selectedRanges():
            rowNumbers.extend(range(r.topRow(), r.bottomRow()+1)) 
        rowNumbers.sort()
        rowNumbers.reverse()
        for n in rowNumbers:        
            self.removeRow(n)
        self.setSortingEnabled(True)

    def displayChoices(self, choices):
        dlg = ChoicesDialog(choices.toList(), self.parent())      
        if dlg.exec_() == QDialog.Accepted:
            choices = []
            for i in range(dlg.choices.count()):
                choices.append(dlg.choices.item(i).text())
            return QVariant(choices)
        else:
            return choices
            

    def updateDelegates(self):
        # Set Choices for dropdowns
        for i in range(self.rowCount()):
            self.item(i, 0).setData(EditorTypeRole,  'UniqueString')
            self.item(i, 1).setData(EditorTypeRole,  'String')
            self.item(i, 2).setData(EditorTypeRole,  'DropDown')
            self.item(i, 3).setData(EditorTypeRole,  'Yes/No')
            self.item(i, 4).setData(EditorTypeRole,  'String')
            self.item(i, 5).setData(EditorTypeRole,  'Yes/No')
            self.item(i, 6).setData(EditorTypeRole,  'String')
            self.item(i, 7).setData(EditorTypeRole,  'Button')
            self.item(i, 2).setData(UserDataRole, QVariant(variableTypes))            
            if self.item(i, 2).data(Qt.DisplayRole)=='DropDown':
                self.item(i, 7).setData(UserDataRole, QVariant(['...', self.displayChoices]))
#            if isReadOnly:
#                for j in range(self.columnCount()):
#                    f = self.item(i, j).font()
#                    f.setBold(True)
#                    self.item(i, j).setFont(f)
#                    self.item(i, j).setData(EditorReadOnlyRole,  True)          
