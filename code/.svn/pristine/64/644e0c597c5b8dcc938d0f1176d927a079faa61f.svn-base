# -*- coding: utf-8 -*-
""" Creates a main menu """
from PyQt4.QtGui import *
from PyQt4.QtCore import *
import os, datetime, threading, subprocess, time, sys, csv


class AddCommand(QUndoCommand):
    def __init__(self, scene, item, parent = None):
        QUndoCommand.__init__(self, 'Added '+ type(item).__name__ + ' '+item.id.toString(),  parent)
        self.scene = scene
        self.item = item

    def undo(self):
        self.scene.removeItem(self.item)        
        self.scene.update()        

    def redo(self):
        self.scene.addItem(self.item)
        self.scene.update()     
        
class RemoveCommand(AddCommand):
    def __init__(self, scene, item, parent = None):
        QUndoCommand.__init__(self, 'Deleted '+ type(item).__name__ + ' '+item.id.toString(),  parent)
        self.scene = scene
        self.item = item

    def undo(self):
        AddCommand.redo(self)

    def redo(self):
        AddCommand.undo(self)

class AddPointCommand(QUndoCommand):
    def __init__(self, path, i, p, time=QTime(), parent = None):
        QUndoCommand.__init__(self, 'Added point to Path ' + path.id.toString() ,  parent)
        self.path = path
        self.i = i
        self.p = p
        self.time = time

    def undo(self):
            self.path.polygon.remove(self.i)
            path = QPainterPath()
            self.path.addQuadFromPolygon(path, self.path.polygon)
#            path.addPolygon(self.path.polygon)
            self.path.setPath(path)
            del[self.path.description[self.i]]
            del[self.path.tags[self.i]]
            del[self.path.startTime[self.i]]
            del[self.path.stopTime[self.i]]
            del[self.path.purchased[self.i]]
            del[self.path.shopped[self.i]]
            del[self.path.category[self.i]]
            del[self.path.phone[self.i]]
            del[self.path.employee[self.i]]
            self.path.orientation.remove(self.i)            
            # move to the previous item
            if self.path.indP > 0:
                self.path.indP = self.i-1  
            else:
                self.path.indP = None

    def redo(self):
        if self.i < len(self.path.polygon):
            delta = self.path.stopTime[self.i-1].toTime().msecsTo(self.path.startTime[self.i].toTime())
            t = self.path.stopTime[self.i-1].toTime().addMSecs(delta/2)
        else:
            t = self.time
        self.path.startTime.insert(self.i,  QVariant(t))        
        self.path.stopTime.insert(self.i,  QVariant(t)) 
        self.path.description.insert(self.i,  QVariant())        
        self.path.tags.insert(self.i,  QVariant())    
        self.path.purchased.insert(self.i,  QVariant(False))
        self.path.shopped.insert(self.i,  QVariant(False))
        self.path.category.insert(self.i,  QVariant())
        self.path.phone.insert(self.i,  QVariant(False))
        self.path.employee.insert(self.i,  QVariant(False))
        self.path.polygon.insert(self.i,  self.p)
        
        for name in self.path.scene().variables:
            params = self.path.scene().variables[name].toList()
            if params[3].toBool(): # list
                li = self.path.variables[name].toList()
                li.insert(self.i, QVariant())
                self.path.variables[name] = QVariant(li)
       
        self.path.indP = self.i
        path = QPainterPath()
        self.path.addQuadFromPolygon(path, self.path.polygon)
#        path.addPolygon(self.path.polygon)
        self.path.setPath(path)
        self.path.orientation.insert(self.i, self.p)

class RemovePointCommand(AddPointCommand):
    def __init__(self, path, i, p, parent = None):
        QUndoCommand.__init__(self, 'Removed point from Path ' + path.id.toString() ,  parent)
        self.path = path
        self.i = i
        self.p = p
        
    def undo(self):
        AddPointCommand.redo(self)

    def redo(self):
        AddPointCommand.undo(self)

class UpdatePointCommand(QUndoCommand):
    def __init__(self, path, i, p, parent = None):
        QUndoCommand.__init__(self, 'Updated point position from Path ' + path.id.toString() ,  parent)
        self.path = path
        self.i = i
        self.p = p
        
    def undo(self):
        self.redo()
        
    def redo(self):
        newP = self.p
        self.p = self.path.polygon[self.i]
        self.path.polygon.replace(self.i,  newP)
        path = QPainterPath()
        self.path.addQuadFromPolygon(path, self.path.polygon)
#        path.addPolygon(self.path.polygon)
        self.path.setPath(path)
        
class UpdateOrientationCommand(QUndoCommand):
    def __init__(self, path, i, p, parent = None):
        QUndoCommand.__init__(self, 'Updated point orientation from Path ' + path.id.toString() ,  parent)
        self.path = path
        self.i = i
        self.p = p
        
    def undo(self):
        self.redo()
        
    def redo(self):
        newP = self.p
        self.p = self.path.orientation[self.i]
        self.path.orientation.replace(self.i,  newP)
