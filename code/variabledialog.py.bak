from PyQt4.QtGui import *
from PyQt4.QtCore import *
from Ui_variabledialog import Ui_VariablesDialog
from variablewidget import *
from track import *
from settings import *

from UnicodeCSV import *

class VariableDialog(QDialog, Ui_VariablesDialog):
    def __init__(self, parent):
        QDialog.__init__(self, parent)
        Ui_VariablesDialog.__init__(self)
        self.setupUi(self)
        self.buttonOk.clicked.connect(self.onOkClicked)
        self.buttonCancel.clicked.connect(self.onCancelClicked)
        self.importButton.clicked.connect(self.importFromFile)
        self.exportButton.clicked.connect(self.exportToFile)
        
        self.addVariable.setIcon(QIcon('icons/plus.png'))
        self.removeVariable.setIcon(QIcon('icons/minus.png'))
        self.addVariable.clicked.connect(self.table.addVariable)
        self.removeVariable.clicked.connect(self.table.removeVariable)
        self.table.setHorizontalHeaderLabels(('Name', 'Description', 'Type', 'Show?', 'Keyboard Shortcut', 'Apply to Each Node?', 'Group', 'Choices'))
        self.table.horizontalHeader().setResizeMode(QHeaderView.Stretch)
        self.loadVariables(self.parent().graphicsView.scene.variables)
        
    def loadVariables(self, variables):
        self.table.clearContents()
        self.table.setSortingEnabled(False)
        for name in variables:
            row = self.table.rowCount()
            self.table.insertRow(row)
            item = QTableWidgetItem()
            item.setData(Qt.DisplayRole, QVariant(name))
            self.table.setItem(row, 0, item)                    
            for i, col in enumerate(variables[name].toList()):
                item = QTableWidgetItem()
                item.setData(Qt.DisplayRole, col)
                self.table.setItem(row, i+1, item)        
        self.table.setSortingEnabled(True)
        self.table.updateDelegates()
                    
    def onCancelClicked(self):
        self.reject()
        
    def onOkClicked(self):
        onename = ''
        self.table.sortItems(0)
        for i in range(self.table.rowCount()):
            name = self.table.item(i, 0).data(Qt.DisplayRole).toString()
            if name == onename:
                QMessageBox.warning(self, 'Warning!', 'The names of the variables must be unique and not blank! Please fix the names highlighted in red.')
                return
            onename = name
        
        if QMessageBox.question(self, 'Warning!', 'Saving these changes to your project will affect all the existing data! Are you sure you want to proceed?', \
            QMessageBox.Yes | QMessageBox.No) == QMessageBox.No: 
                return
        scene = self.parent().graphicsView.scene        
        scene.variables.clear()
        
        for i in range(self.table.rowCount()):
            name = self.table.item(i, 0).data(Qt.DisplayRole).toString()
            cols = QVariant([self.table.item(i, j).data(Qt.DisplayRole) for j in range(1, self.table.columnCount())])
            scene.variables[name] = cols
        
        # make sure all current paths are updated
        for item in scene.items():
            if type(item) == Path: 
                item.populateVariables()
        if scene.currentPath:
            scene.loadSignal.emit(scene.currentPath)
        self.accept()

    def importFromFile(self):
        filename = QFileDialog.getOpenFileName(self, "Choose Comma Separated Variables File", os.getcwdu(), 'CSV Files (*.csv)')
        if not filename:
            return        
        
        import csv
        reader = csv.reader(open(filename, 'rb'))
        self.table.setSortingEnabled(False)
        for line in reader:
            line = map(str.strip, line)
            if QString(line[0]) in self.parent().graphicsView.scene.variables:  # edit already existing variables
                del self.parent().graphicsView.scene.variables[QString(line[0])]
                items = self.table.findItems(QString(line[0]), Qt.MatchExactly)
                for item in items:
                    self.table.removeRow(item.row())
            row = self.table.rowCount()
            self.table.insertRow(row)            
            for i, col in enumerate(line):
                item = QTableWidgetItem()
                item.setData(Qt.DisplayRole, col)
                self.table.setItem(row, i, item)        
            self.table.setItem(row, 7, QTableWidgetItem())
        self.table.setSortingEnabled(True)                
        self.table.updateDelegates()

                
    def exportToFile(self):
        filename = QFileDialog.getSaveFileName(self, "Choose Comma Separated Variables File", os.getcwdu(), 'CSV Files (*.csv)')
        if not filename:
            return        
        
        writer = UnicodeWriter(open(filename, 'wb'))            
#        writer.writerow(['Name', 'Type', 'Show?', 'Keyboard Shortcut', 'Apply to Each Node?', 'Group', 'Choices'])
        for i in range(self.table.rowCount()):
            row = []
            for j in range(self.table.columnCount()):
                row.append(unicode(self.table.item(i, j).data(Qt.DisplayRole).toString()))
            writer.writerow(row)
            
